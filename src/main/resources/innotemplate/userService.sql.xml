<template>
	<class id="userService">
		<sql id="getUser">
			<![CDATA[
			   SELECT
             DISTINCT 
             USER_ID as "userId",
             USER_ACCT as "userAcct",
             USER_NAME as "userName",
             USER_STATUS as "userStatus",
             USER_SEX as "userSex",
             USER_BIRTH as "userBirth",
             USER_MOBILE as "userMobile",
             WMSYS.WM_CONCAT(org_i_name) as "institution",
             WMSYS.WM_CONCAT(org_o_name) as "department"
          FROM
              (
					select A.*,b.org_i_name,b.org_o_name 
					from 
						ORM_USER a,
						ORM_ORG_USER_MAP_VIEW b 
					where 
						a.user_id=b.user_id 
						and B.ORG_I_ID=:orgId
						<#if userAcct?? && userAcct != ''>
							AND a.USER_ACCT LIKE '%${userAcct}%'
						</#if>
						<#if userName?? && userName != ''>
							AND a.USER_NAME LIKE '%${userName}%'
						</#if>
						<#if userStatus?? && userStatus != ''>
							AND a.USER_STATUS = :userStatus
						</#if>
						order by a.create_dt
				)
				GROUP BY USER_ID,USER_ACCT,USER_STATUS,USER_NAME,USER_SEX,USER_BIRTH,USER_MOBILE
			]]>
		</sql>
	</class>
	<class id="orgService">
		<sql id="institutionTree">
			<![CDATA[
			with temporg as (select * from ORM_ORGANIZATION where org_type = 'I'),
     		treeorg as (
         		SELECT ORG_ID, PARENT_ORG_ID, CONNECT_BY_ROOT (ORG_ID) root FROM (
             	SELECT ORG_ID, PARENT_ORG_ID FROM (SELECT ORG_ID,DECODE(org_type,'I','ROOT',PARENT_ORG_ID) PARENT_ORG_ID,ROOT_ORG_ID FROM ORM_ORGANIZATION) START WITH ROOT_ORG_ID = ORG_ID CONNECT BY PARENT_ORG_ID = PRIOR ORG_ID 
             	) CONNECT BY PRIOR ORG_ID = PARENT_ORG_ID
     		)
			SELECT c.*, b.num FROM  (
				SELECT root AS id, count(1) num FROM (
    				SELECT distinct b.user_id,a.root FROM treeorg A right JOIN (
               			SELECT ORG_ID, user_id FROM ORM_ORG_USER_MAP
         			) b ON a.ORG_ID = b.ORG_ID
				) group by root
			) b right join temporg c on b.id = c.org_id order by ORDER_NUMBER ASC 
			]]>
		</sql>
		<sql id="orgTree">
		<![CDATA[
			with temporg as (select * from ORM_ORGANIZATION where ROOT_ORG_ID = :instId),
     		treeorg as (
         		SELECT ORG_ID, PARENT_ORG_ID, CONNECT_BY_ROOT (ORG_ID) root FROM (
            		 SELECT ORG_ID, PARENT_ORG_ID FROM temporg START WITH ROOT_ORG_ID = ORG_ID CONNECT BY PARENT_ORG_ID = PRIOR ORG_ID
             	) CONNECT BY PRIOR ORG_ID = PARENT_ORG_ID
     		)
			SELECT c.*, b.num FROM  (
				SELECT root AS id, count(1) num FROM (
    				SELECT distinct b.user_id,a.root FROM treeorg A right JOIN (
               			SELECT ORG_ID, user_id FROM ORM_ORG_USER_MAP
         			) b ON a.ORG_ID = b.ORG_ID
				) group by root
			) b right join temporg c on b.id = c.org_id order by ORDER_NUMBER ASC 		
			]]>
		</sql>
	</class>
	<class id="userRole">
		<sql id="assign">
		<![CDATA[
			SELECT
				r.ROLE_ID as "roleId",
				r.ROLE_NAME_CN as "roleNameCn",
				r.SYSTEM_ID as "systemId",
				s.SYSTEM_NAME as "systemName",
				m.RELATE_TYPE as "realateType"
			FROM
				ORM_ROLE r,
				ORM_USER_ROLE_MAP_VIEW m,
				ORM_SYSTEM s
			WHERE
				r.ROLE_ID=m.ROLE_ID
			<#if roleName?? && roleName != ''>
				AND r.ROLE_NAME_CN LIKE :roleName 
			</#if>
			<#if systemId?? && systemId != ''>
				AND r.SYSTEM_ID = :systemId
			</#if>
				AND m.USER_ID=:userId
				AND r.SYSTEM_ID=s.SYSTEM_ID
				]]>
		</sql>
		<sql id="notAssign">
		<![CDATA[
			SELECT
				r.ROLE_ID as "roleId",
				r.ROLE_NAME_CN as "roleNameCn",
				r.SYSTEM_ID as "systemId",
				s.SYSTEM_NAME as "systemName"
			FROM
				ORM_ROLE r,
				ORM_SYSTEM s
			WHERE
				r.ROLE_ID NOT IN (
					SELECT
						role.ROLE_ID
					FROM
						ORM_ROLE role,
						ORM_USER_ROLE_MAP map
					WHERE
						role.ROLE_ID=map.ROLE_ID
						AND map.USER_ID=:userId
				)
				AND r.SYSTEM_ID=s.SYSTEM_ID
			<#if roleName?? && roleName != ''>
				AND r.ROLE_NAME_CN LIKE :roleName
			</#if>
			<#if systemId?? && systemId != ''>
				AND r.SYSTEM_ID = :systemId
			</#if>
			]]>
		</sql>
	</class>
		<class id="orgRole">
		<sql id="assign">
		<![CDATA[
			SELECT
				r.ROLE_ID as "roleId",
				r.ROLE_NAME_CN as "roleNameCn",
				r.SYSTEM_ID as "systemId",
				s.SYSTEM_NAME as "systemName"
			FROM
				ORM_ROLE r,
				ORM_ORG_ROLE_MAP m,
				ORM_SYSTEM s
			WHERE
				r.ROLE_ID=m.ROLE_ID
			<#if roleName?? && roleName != ''>
				AND r.ROLE_NAME_CN LIKE :roleName 
			</#if>
			<#if systemId?? && systemId != ''>
				AND r.SYSTEM_ID = :systemId
			</#if>
				AND m.ORG_ID=:orgId
				AND r.SYSTEM_ID=s.SYSTEM_ID
				]]>
		</sql>
		<sql id="notAssign">
		<![CDATA[
			SELECT
				r.ROLE_ID as "roleId",
				r.ROLE_NAME_CN as "roleNameCn",
				r.SYSTEM_ID as "systemId",
				s.SYSTEM_NAME as "systemName"
			FROM
				ORM_ROLE r,
				ORM_SYSTEM s
			WHERE
				r.ROLE_ID NOT IN (
					SELECT
						role.ROLE_ID
					FROM
						ORM_ROLE role,
						ORM_ORG_ROLE_MAP map
					WHERE
						role.ROLE_ID=map.ROLE_ID
						AND map.ORG_ID=:orgId
				)
				AND r.SYSTEM_ID=s.SYSTEM_ID
			<#if roleName?? && roleName != ''>
				AND r.ROLE_NAME_CN LIKE :roleName
			</#if>
			<#if systemId?? && systemId != ''>
				AND r.SYSTEM_ID = :systemId
			</#if>
			]]>
		</sql>
	</class>
	<class id="org">
		<sql id="emps">
			select 
				c.*
			 from 
			 	ORM_USER c,
			 	ORM_ORG_USER_MAP_VIEW m
			 
			 where 
			 	c.user_id = m.user_id
			 	AND m.org_id = :orgId
		</sql>
	</class>
</template>